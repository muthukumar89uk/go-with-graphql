package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"errors"
	"jobPostGraphQl/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	user := model.User{
		Username:    input.Name,
		Email:       input.Email,
		PhoneNumber: input.PhoneNumber,
		Password:    input.Password,
	}

	if err := r.DB.Create(&user).Error; err != nil {
		return nil, err
	}

	return &user, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id int, input model.NewUser) (*model.User, error) {
	updateUser := model.User{
		Username:    input.Name,
		Email:       input.Email,
		PhoneNumber: input.PhoneNumber,
		Password:    input.Password,
	}

	if err := r.DB.Model(&model.User{}).Where("ID=?", id).Updates(&updateUser).Error; err != nil {
		return nil, err
	}

	updateUser.ID = id
	return &updateUser, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id int) (*model.DeleteStatus, error) {
	var user model.User

	if err := r.DB.Model(&model.User{}).Where("ID=?", id).First(&user).Delete(&user).Error; err != nil {
		msg := "faild to find the book id to delete"
		return &model.DeleteStatus{Iserror: true, Message: &msg}, errors.New(msg)
	}
	msg := "delection success"
	return &model.DeleteStatus{Iserror: false, Message: &msg}, nil
}

// CreateProfile is the resolver for the createProfile field.
func (r *mutationResolver) CreateProfile(ctx context.Context, input model.NewProfile) (*model.Profile, error) {
	profile := model.Profile{
		FullName: input.FullName,
		Age:      input.Age,
		Gender:   input.Gender,
		Address:  input.Address,
	}
	if err := r.DB.Create(&profile).Error; err != nil {
		return nil, err
	}

	return &profile, nil
}

// UpdateProfile is the resolver for the updateProfile field.
func (r *mutationResolver) UpdateProfile(ctx context.Context, id int, input model.NewProfile) (*model.Profile, error) {
	updateProfile := model.Profile{
		FullName: input.FullName,
		Age:      input.Age,
		Gender:   input.Gender,
		Address:  input.Address,
	}

	if err := r.DB.Model(&model.Profile{}).Where("ID=?", id).Updates(&updateProfile).Error; err != nil {
		return nil, err
	}

	updateProfile.ID = id
	return &updateProfile, nil
}

// DeleteProfile is the resolver for the deleteProfile field.
func (r *mutationResolver) DeleteProfile(ctx context.Context, id int) (*model.DeleteStatus, error) {
	var profile model.Profile

	if err := r.DB.Model(&model.Profile{}).Where("ID=?", id).First(&profile).Delete(&profile).Error; err != nil {
		msg := "faild to find the book id to delete"
		return &model.DeleteStatus{Iserror: true, Message: &msg}, errors.New(msg)
	}
	msg := "delection success"
	return &model.DeleteStatus{Iserror: false, Message: &msg}, nil
}

// CreateCareer is the resolver for the createCareer field.
func (r *mutationResolver) CreateCareer(ctx context.Context, input model.NewCareer) (*model.Career, error) {
	career := model.Career{
		Company:     input.Company,
		Position:    input.Position,
		JobType:     input.JobType,
		Description: input.Description,
	}

	if err := r.DB.Create(&career).Error; err != nil {
		return nil, err
	}

	return &career, nil
}

// UpdateCareer is the resolver for the updateCareer field.
func (r *mutationResolver) UpdateCareer(ctx context.Context, id int, input model.NewCareer) (*model.Career, error) {
	updatedCareer := model.Career{
		Company:     input.Company,
		Position:    input.Position,
		JobType:     input.JobType,
		Description: input.Description,
	}

	if err := r.DB.Model(&model.Profile{}).Where("ID=?", id).Updates(&updatedCareer).Error; err != nil {
		return nil, err
	}

	updatedCareer.ID = id
	return &updatedCareer, nil
}

// DeleteCareer is the resolver for the deleteCareer field.
func (r *mutationResolver) DeleteCareer(ctx context.Context, id int) (*model.DeleteStatus, error) {
	var career model.Career

	if err := r.DB.Model(&model.Career{}).Where("ID=?", id).First(&career).Delete(&career).Error; err != nil {
		msg := "faild to find the book id to delete"
		return &model.DeleteStatus{Iserror: true, Message: &msg}, errors.New(msg)
	}
	msg := "delection success"
	return &model.DeleteStatus{Iserror: false, Message: &msg}, nil
}

// GetAllUsers is the resolver for the GetAllUsers field.
func (r *queryResolver) GetAllUsers(ctx context.Context) ([]*model.User, error) {
	var users []*model.User

	if err := r.DB.Model(&users).Find(&users).Error; err != nil {
		return nil, err
	}
	return users, nil
}

// GetOneUserByID is the resolver for the GetOneUserById field.
func (r *queryResolver) GetOneUserByID(ctx context.Context, id int) (*model.User, error) {
	var users *model.User

	if err := r.DB.Model(&users).Find(&users, id).Error; err != nil {
		return nil, err
	}
	return users, nil
}

// GetAllProfile is the resolver for the GetAllProfile field.
func (r *queryResolver) GetAllProfile(ctx context.Context) ([]*model.Profile, error) {
	var profiles []*model.Profile

	if err := r.DB.Model(&profiles).Find(&profiles).Error; err != nil {
		return nil, err
	}
	return profiles, nil
}

// GetOneProfile is the resolver for the GetOneProfile field.
func (r *queryResolver) GetOneProfile(ctx context.Context, id int) (*model.Profile, error) {
	var profile *model.Profile

	if err := r.DB.Model(&profile).Find(&profile, id).Error; err != nil {
		return nil, err
	}
	return profile, nil
}

// GetAllCareer is the resolver for the GetAllCareer field.
func (r *queryResolver) GetAllCareer(ctx context.Context) ([]*model.Career, error) {
	var careers []*model.Career

	if err := r.DB.Model(&careers).Find(&careers).Error; err != nil {
		return nil, err
	}
	return careers, nil
}

// GetOneCareer is the resolver for the GetOneCareer field.
func (r *queryResolver) GetOneCareer(ctx context.Context, id int) (*model.Career, error) {
	var career *model.Career

	if err := r.DB.Model(&career).Find(&career, id).Error; err != nil {
		return nil, err
	}
	return career, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
